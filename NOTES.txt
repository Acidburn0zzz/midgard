
REACTIFY:
    ✓ move all the existing JS into an "OLD" directory, to be ported one by one
    - rewrite the css to have an entry point, use ungrid and normalize, reuse the same stuff as AN
    - have the root render as a react component
    - rewrite index.html to just load the real dependencies
    - get the login logic from AN and port it to the model we have here
    - render the login
    - start porting over the rest piece by piece

MAILBOX:
    - keep track of last seen
    - show badges
    - show list of mailboxes that depends on configured filters
    - store/load filter preferences from user
    - drop the widgets ideas

DB:
    - have the DB be configured when run, not on load

PHEME:
    - have loaders be in charge of knowing when they've already seen a given item
    - add support for minutes using https://cvs.w3.org/recent-commits?user=swick






TODO:
    - have all data access go through Fetch instead of the horrible jQuery API
    - add a "see more" link to those events in which it makes sense, and get rendered HTML as in
      https://developer.github.com/v3/media/. Or even just load it by default (from the client).
    - switch to the mailbox style, it's much cleaner
    - login errors should look like this:
        https://twitter.com/dontcallmeDOM/status/605344338764279809


LOAD:
    ✓ #fetch user

LOGIN:
    - load specific layout with just one widget
    - /api/login
    - if successful, go to fetch user

FETCH USER:
    ✓ /api/user
    - if none: #login
    - get layout
    - if none: default layout
    - instantiate layout
    - instantiate widgets
